import scipy as sc
import numpy as np
from scipy import linalg as LS
from numpy import linalg as LA
import matplotlib.pyplot as plt

#paramètres
global T
T = 0.5

P = 500 
dt = T/P 
I = 100
dx=1.0/(I+1)


#Fonction qui renvoie la valeur de la condition initiale c0(x)
def c0(x) :
    return (1.0/(x+0.01))
    
xvec = np.zeros(I) 
for i in range(0,I):
    xvec[i] = (i+0.5)/(I+1); 
    
# Définition de la matrice B
B = - np.eye(I)/dx
for i in range(0,I-1):
    B[i,i+1]=1.0/dx


# Définition de la matrice identite de taille I
Id = np.zeros((I,I))
for i in range(0,I):
    Id[i,i] = 1.0
    
# Définition du vecteur U0 qui correspond à la discrétisation de la condition initiale C0(x)
C0 = np.zeros(I); 
for i in range(0,I): 
    C0[i] = c0((i+1)*dx)
    
#Le champs de vitesse n'est pas forcément uniforme
#On peut l'exprimer par une matrice diag(u0, u1....u(I-1))

def u(x):
    return 1
     
def Mat_u():
    U=np.zeros(I)
    for i in range(I):
        U[i,i]=u(i*dx)
    return U
    
#####################################################################
# Dynamique d'Euler implicite
######################################################################

#Le tableau M va contenir toutes les itérations en temps du vecteur U
M = np.zeros((I,P+1)); 

#Initialisation
C = C0 
M[:,0] = C; 

# print("Affichage de la fonction C0 initiale")  
# plt.plot(xvec, C) 
# plt.xlabel('x')
# plt.ylabel('u(x)') 
# plt.axis([0, 1, -0.1, 0.1])
# plt.show()


# print("Calcul de la solution c(t,x)")
for p in range(1,P+1):
    print(p)
    Cp = C    
    K=dt*B+Id
    C = LA.solve(K,Cp) 
    M[:,p] = C

#     plt.plot(xvec, C)
#     plt.xlabel('x')
#     plt.ylabel('c(x)') 
#     plt.axis([0, 1, -100, 100])
#     plt.draw()
#     plt.show(block=False)
#     plt.clf()



#On calcule la décomposition SVD de la matrice M
print("Calcul de la décomposition SVD de la matrice M")
Ut,St,Vt = LS.svd(M) 



########################################################################
#On commence par choisir un rang r particulier pour la décomposition POD
#Dans un deucième temps, on fera une boucle pour calculer toutes les erreurs
#que l'on stockera dans le tableau errtab
########################################################################

errtab = []; 

for r in range(1,7):

    # Definition de la matrice identité de taille r
    Id = np.zeros((I,I))
    for j in range(0,I):
        Id[j,j] = 1
    Idr = Id[0:r,0:r]

    # Construction des fonctions de bases du modèle POD réduit
    Ur = Ut[:, 0:r]

    


    # Initialisation
    A0=np.dot(np.transpose(Ur),C0)
    A = A0 

    # Le tableau Ctot va contenir toutes les valeurs de A^0, A^1, ..., A^P
    Atot = np.zeros((r, P+1)); 
    Atot[:,0] = A0; 
    
    
    # Construction de la matrice réduite Btilde 
    Bt = np.dot(np.transpose(Ur),np.dot(B,Ur))
    
    for p in range(1,P+1):

        Ap = A; 
        Kr = Idr + dt*Bt
        A = LA.solve(Kr,Ap) 
        Atot[:,p] = A; 

    #On reconstruit l'approximation de U obtenue grâce au modèle réduit
    Wr = np.dot(Ur,Atot)              

    #On trace la solution du modèle réduit en fonction du temps
    # for s in range(0,P+1):
    #     W = Wr[:,s]        
    #     plt.plot(xvec, W)
    #     plt.xlabel('x')
    #     plt.ylabel('ured(x)') 
    #     plt.axis([0, 1, -0.1, 0.1])
    #     plt.draw()
    #     plt.show(block=False)
    #     plt.clf()


    #Calcul de l'erreur 
    temp1 = np.dot((M-Wr).transpose(), M-Wr)
    temp2 = np.dot(M.transpose(), M)
    err = temp1.trace()*dt*dx/(temp2.trace()*dt*dx); 

    
    print("r = ")
    print(r)
    print("err = ")
    print(err)

    #Stockage de l'erreur dans un tableau
    errtab.append(err) 


plt.plot(range(1,7), np.log(errtab)/np.log(10));
plt.show()
